{"0": {
"doc":  "Introduction to Simply Jekyll",
"title": "Introduction to Simply Jekyll",
"content": "Simply Jekyll is a highly functional jekyll-based theme that combines the best of different worlds. It is a minimal and distraction free theme that strives to provide maximum value all without holding back on any essential features that a user would benefit from or would desire for. This is an evolving project and is garanteed to be maintained at least for quite some time as I myself am a beneficiary of this theme and the project. The theme provides a rich set of features that include: . | Wiki-style markdown syntax for both internal as well as external links. | Support for backlinks and related posts to exhort serendipitous encounters. | Feed-specific context menu for instantly accessing the related posts and references. | Lunrjs based search with previews and shortcut to trigger search. | Auto stale-link management for internal links. | Custom syntax for sidenotes and marginnotes on either side of the feed/post. | Support for partial transclusion of posts. | On hover page preview. | Custom classes to style phrasing elements like quotes, callouts, etc by mentioning size, font-types, weight, box etc. | Preliminary support for flashcards. | Custom syntax to highlight your favorite part of the post (No, I am not talking about code syntax highlighting, which is already provided by Jekyll through Rouge). | Support for external link identifier through icons. | Finally, the most important of them all — No bloatware or frameworks! | . Plus everything else that you can already do with jekyll like write something on a bunch of markdown files and convert it into a HTML file or sprinkle in some inline html can still be done alongside these features. Neat stuff, isn&#39;t it? To see the above mentioned features in action go check out the next post. :P . Also see the sample post—[[Lorem ipsum dolor sit amet]]—to get a feel for how an actual essay would look like. :) .",
"url": "/intro"
},"1": {
"doc":  "Lorem ipsum dolor sit amet",
"title": "Lorem ipsum dolor sit amet",
"content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam lorem elit, rutrum et nibh ac, vulputate mollis lorem. Fusce at lectus id risus scelerisque suscipit. Vestibulum nec lobortis ex. Proin augue odio, euismod a vehicula ut, auctor ac turpis. Morbi eget facilisis turpis, quis tincidunt neque. Nulla facilisi. Pellentesque porta vel purus eget vulputate. Etiam sodales tincidunt nibh, eget pharetra augue aliquam id. Praesent varius egestas leo, ut luctus risus molestie ut. Integer sapien neque, efficitur vel leo in, aliquet lacinia elit. Nulla a magna ut dui blandit tempus id nec sem. Donec imperdiet lacus posuere quam imperdiet, sed pharetra nulla fringilla. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce ante neque, ullamcorper at porttitor nec, scelerisque vel neque. Sed ac aliquam leo. Sed nec elementum est. Quisque sed massa vulputate, ultrices risus eu, blandit tellus. Maecenas sed cursus lacus, vitae molestie nunc. Morbi vel ex leo. Maecenas eu orci non nisl aliquam ullamcorper. Phasellus dapibus eget arcu ut laoreet. Vestibulum semper nec justo et venenatis. Cras Venenatis . Cras venenatis ut tortor eu vestibulum. Mauris viverra dui vel eros consectetur pretium. Praesent a vestibulum quam, at vestibulum risus. Aenean sed lobortis felis. Phasellus a fermentum nibh. Integer in purus ex. Cras fermentum hendrerit nisi. Sed aliquet ut nunc eget tristique. Vestibulum in volutpat lorem. Pellentesque turpis metus, facilisis vitae tincidunt vulputate, elementum quis nulla. Nulla ac nibh nec urna blandit venenatis. Etiam lectus diam, maximus vel felis eu, facilisis egestas tellus. Curabitur tellus ex, blandit et ex vitae, dignissim auctor orci. Sed molestie quam ut venenatis congue. Praesent posuere, massa nec ullamcorper porta, libero neque tincidunt sem, et posuere leo sapien ut tellus. Phasellus in purus gravida, lobortis felis quis, consequat tortor. Vivamus lobortis sem massa, dignissim porta magna tincidunt ut. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Ut viverra orci risus, in efficitur mi venenatis nec. Maecenas ac risus eu magna euismod faucibus. Quisque at ante ut ante vehicula commodo. Praesent lacinia turpis ex, vitae vehicula purus luctus a. Donec mattis accumsan tincidunt. Fusce ac lectus augue. Cras aliquam massa aliquet orci ultricies, sit amet ultrices ipsum dignissim. Quisque non faucibus dui. Donec euismod nulla nec arcu malesuada, ac fermentum ligula consequat. Maecenas pellentesque massa quis pretium sollicitudin. Mauris vel felis hendrerit, tristique purus eget, venenatis metus. Praesent urna est, aliquet non blandit quis, tristique sit amet nulla. Donec ut malesuada libero. In hac habitasse platea dictumst. Donec nisi quam, lacinia gravida dui sed, vulputate egestas neque.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam lorem elit, rutrum et nibh ac, vulputate mollis lorem. Fusce at lectus id risus scelerisque suscipit. Vestibulum nec lobortis ex. Proin augue odio, euismod a vehicula ut, auctor ac turpis. Morbi eget facilisis turpis, quis tincidunt neque. Nulla facilisi. Pellentesque porta vel purus eget vulputate. Etiam sodales tincidunt nibh, eget pharetra augue aliquam id. Praesent varius egestas leo, ut luctus risus molestie ut. Integer sapien neque, efficitur vel leo in, aliquet lacinia elit. Nulla a magna ut dui blandit tempus id nec sem. Donec imperdiet lacus posuere quam imperdiet, sed pharetra nulla fringilla. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce ante neque, ullamcorper at porttitor nec, scelerisque vel neque. Sed ac aliquam leo. Sed nec elementum est. Quisque sed massa vulputate, ultrices risus eu, blandit tellus. Maecenas sed cursus lacus, vitae molestie nunc. Morbi vel ex leo. Maecenas eu orci non nisl aliquam ullamcorper. Phasellus dapibus eget arcu ut laoreet. Vestibulum semper nec justo et venenatis. Cras venenatis ut tortor eu vestibulum. Mauris viverra dui vel eros consectetur pretium. Praesent a vestibulum quam, at vestibulum risus. Aenean sed lobortis felis. Phasellus a fermentum nibh. Integer in purus ex. Cras fermentum hendrerit nisi. Sed aliquet ut nunc eget tristique. Vestibulum in volutpat lorem. Pellentesque turpis metus, facilisis vitae tincidunt vulputate, elementum quis nulla. Nulla ac nibh nec urna blandit venenatis. Etiam lectus diam, maximus vel felis eu, facilisis egestas tellus. Curabitur tellus ex, blandit et ex vitae, dignissim auctor orci. Sed molestie . Sed molestie quam ut venenatis congue. Praesent posuere, massa nec ullamcorper porta, libero neque tincidunt sem, et posuere leo sapien ut tellus. Phasellus in purus gravida, lobortis felis quis, consequat tortor. Vivamus lobortis sem massa, dignissim porta magna tincidunt ut. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Ut viverra orci risus, in efficitur mi venenatis nec. Maecenas ac risus eu magna euismod faucibus. Quisque at ante ut ante vehicula commodo. Praesent lacinia turpis ex, vitae vehicula purus luctus a. Donec mattis accumsan tincidunt. Fusce ac lectus augue. Cras aliquam . Cras aliquam massa aliquet orci ultricies, sit amet ultrices ipsum dignissim. Quisque non faucibus dui. Donec euismod nulla nec arcu malesuada, ac fermentum ligula consequat. Maecenas pellentesque massa quis pretium sollicitudin. Mauris vel felis hendrerit, tristique purus eget, venenatis metus. Praesent urna est, aliquet non blandit quis, tristique sit amet nulla. Donec ut malesuada libero. In hac habitasse platea dictumst. Donec nisi quam, lacinia gravida dui sed, vulputate egestas neque . References . | SomeLatinGuy. (1920). [[Ipsum Dolor Sit Amet::https://www.lipsum.com/feed/html]] | .",
"url": "/lorem"
},"2": {
"doc":  "Exploring the features of Simply Jekyll",
"title": "Exploring the features of Simply Jekyll",
"content": "Essentiality is the heart of any good software, and this theme is designed to ensure that I don&#39;t add things that I won&#39;t use on a daily basis or not have things that would be important for my personal usecase. It has been designed carefully to get rid of all the feature creeps, bloatwares, etc. i.e., no bootstrap, no semantic, no jquery, no nothing… . That said, this is a ready made theme and I am making it public so that more number of people will use it and enjoy the experience of using it. So, pardon my bigotry there😅. As for the list of features, this website steals features from every website that I can think of, or more appropriately the design inspiration for this website is derived from multiple sources; Here is the tiny list for the curious: . | Backlinks: Roam Research | Transclusion: Tiddlywiki | Sidenote: Edward Tufte, Gwern Branwen | Stale Link Highlighting: Tiddlywiki | Wiki-style links: Every wiki ever | Text highlighting: Roam Research | Page preview: Wikipedia | Context menu: Google Docs | Notes: Andy Matuschak&#39;s Evergreen Notes | Color scheme: Github | Feed like structure for home page: Twitter | Omnisearch box at the top: Google | Profile board: Twitter/Instagram | . Now that you know all my secrets let us not waste any more time into further exposing my true nature in its entirety and get started with tour:P . Note: This page only showcases the features. How to use these feature is mentioned in a separate article. Backlinks . Backlinks or as Roam Research calls it &quot;Birdirectional Links&quot; is a nifty little feature that allows not only users reading your essays/articles to encounter interesting related articles, this is something you as a author yourself will see how powerful it is once you start browsing around your website. Backlinks are basically a link on PostA indicating all the mentions of PostA on different Posts. The neat stuff is it won&#39;t show up with an empty box if a given post doesn&#39;t have any backlinks and if it is already included in backlinks, it won&#39;t show up in your related posts[[Related Posts: Posts that share same tag(s). Linked References(Backlinks): Posts that link other posts inside your blog.::rmn]]. :) . Here is a screenshot of what mentions/backlinks will look like in a page: . In the above example, it can be seen that there are three links, it means that all the three pages have a link to the page in which they are being displayed as a backlink. For eg. If you scroll all the way to the bottom, you will something similar i.e., you will see a link to the pages that has a link to this page. Sidenotes and Marginnotes . Of what use are such wide margins when you can&#39;t make efficient use of them. Fear not, we have a way to handle that too — Marginnotes[[There are two types of people, those who have taste and those who don&#39;t. And anyone who has even a tiny bit of taste will never, never-ever use footnotes over sidenotes.—Some random blogger who shall remain unamed::rmn]]. For what it&#39;s worth, when you stroll down a garden, you don&#39;t ever see a flower bloom 10 miles away from the plant do you? This is where sidenotes come in and replace their paper-era sibling ie., footnotes. If it is relevant you see it right there. (No scrolling = No cognitive strain). The entire idea is to allow users to have a pleasant time on your blog i.e., Not too distracting(offputting), not too mesmerizing, just the right amount of ornamentation to allow seamless reading experience[[I see it as an issue of managing &amp;amp; exposing the length. Some readers want to go as deep as you can take them, but others are frustrated if you block them from moving on. I deal with it by use of collapsible sections+abstracts, margin notes, and explicit topics in list items.—Tweet by Gwern Branwen::lsn]]. The added advantage we have with this website is it has wide margins allowing us to use both sides for sidenotes. So we can use them for quotations, small snippets, and also for interactive/expository animations. The first one on the right is a marginnote and the second one on the left is a sidenote. You may ask what is the difference, it looks all the same to me. You are right to some extent, but if you look closely you will see that the one on left has a number attached to it while the one on the right doesn&#39;t. Yes, that is all the difference there is, at least [[Edward Tufte::https://edwardtufte.github.io/tufte-css/]] says. On-feed context menu . Context menus are a great way to improve user experience if they are done correctly. Given that our theme has a feed-link structure for the landing page, it leverages the opportunity and saves second time visitors who have already read the article and are only here to see other related articles or the backlinks by just simply right clicking on the feed. Thereby saving users the unnecessay time involved with clicking on a link and scrolling all the way down to see the backlinks or related articles. Here is a screenshot for people who are too lazy, while the rest of you can go back to the home page and try it out by right clicking on a particular feed entry: . On-hover page preview . Ever been to a blog or a tutorial site and seen links to other pages without any clue as to what that page is about apart from vague statements like &quot;See Related&quot; or &quot;Click here for Part II&quot;. We all have had that experience, haven&#39;t we? Wouldn&#39;t it be nice to be able to take a cursory glance at the page just so that you could get a feel of it and decide quickly as to whether or not do you really want to read that post without having to click on the link and wait for the ginormous scroll of text to load? That is precisely what page previews are for. For eg, try to hover over this link: [[Lorem ipsum dolor sit amet]]. And yes, all of what you see is available right out of the box. No configuration, no sh*t, no shinola. Transclusion . Once I had sidenotes and page preview for my blog, transclusion[[Lorem ipsum dolor sit amet::rmn-transclude]] just felt like the natural next step to it. I mean there are less important pages that you can leave at the discretion of the readers to hover-over and take a peak, and then there are pages that you want to explicity show a glimpse of, but how do you do it? Obviously, putting a chunk of random text in the most of your post is just unacceptable UX, but then how else do you do it? You could just combine the nifty little preview thingy with your nice little sidenote thingy and let users get a glimpse of the important stuff without getting distracted. Amazing, isn&#39;t it? . Link Management . Now the biggest of them all: the permalink curse. Most of us are never happy with the first title that we come up with, and when you excitingly write a new post embedding an old post—the title of which you always wanted to change but never got time to do so because you were busy creating content—it sometimes happens that you forget to update the relevant link all the associated places that you linked it in. And I think this is worst of them all in terms of an UX nightmare. Although we don&#39;t have a complete solution given that we are using a static site generator, I think we have a decent mechanism to atleast find the culprit links without clicking at them (a.k.a highlighting links that don&#39;t point anywhere, but ideally must be pointing to some location due to which they cannot be deleted). Here is an example of: . | A perfectly valid link: [[Lorem ipsum dolor sit amet]] | A bad link that does not point anywhere: [[Some non-existing title]] | . See how it highlights in yellow? I feel this is a game-changer that anyone who has a personal website should at least think of incorporating in their website given the number of deadlink issues we face. Note: This only works with local/internal links. Miscellaneous Features: Highlighting text, Primitive Flash Cards, and Some gimmicks . Text Highlighting . So you are writing an essay and you want to emphasize a particular portion of your essay to your audience that you think is just mindblowing. Tools like Medium provide such an easy way to do this while we still keep scratching our head with mark tags and p tag with a background color and what not.. Worry not, this theme allows you to easily highlight a portion of a text without any hassle. Here is an example of it: . &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, [[quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident::highlight]], sunt in culpa qui officia deserunt mollit anim id est laborum.&quot; . Primitive Flashcards . Anki has been my friend, my well-wisher, my guardian, pretty much everything for the last one year of my intellectual life. I have a half-hour morning routine that I follow dilligently in going through the scheduled anki decks to strengthen my neuronal connection on a particular topic/subject. And I have been doing it consistently for almost a year now. This is an attempt at recreating the aspect of spaced-repetition to allow my brain to form interesting connections based on things I have already written. The plan is to extend it using local storage and somekind of firebase like service to provide a constant reminder to users using the supermemo algorithm, but as of now, this is where I stand — a simple on-click card to keep the thing going until I build something better. Here is an example(click on the card): . &quot;Lorem ipsum dolor sit amet, [[consectetur adipiscing elit, sed do eiusmod tempor::srs]] incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot; . For all you know, this could be used for some interesting things if you have a tutorials website where you write posts on technical concepts. So that&#39;s that. The Gimmicks . Profile Board for Main Site . If you have ever used a social media with feeds you probably have stalked the profiles of people you find interesting, but the problem is as much as the mystery gets someone into look at your profile, it also makes them form opinions. If the profile reads author, you see their feed one way; and if it says scientist from Caltech, you see it the other. I mean as much as authority is a thing to form opinions about, it also alienates people from what could potentially have been a great relation if not for the credentiality and appearance. So, the idea with the profile board was to get done with this stuff right away so that people can enjoy the content instead of going profile hunting on your credibility and accomplishments and appearances to judge and validate their opinions by validating you. Here is the screenshot: . Omnisearch bar . This is inspired by the browsers like Chrome and Firefox where the searchbar is always placed at the top so that readers can easily search for the next thing without having to go back to the main page and scroll through dozens of articles. And I personally like this one because, it allows me as an author/writer to quickly jump between different posts while I am reading my articles to reference in my other articles. Here is a screenshot: . Note: The searchbar is not implemented as a scrollspying widget that pins itself automatically is because I have a preference for distraction free content when reading, that is why the website provides a chevron to scroll to the top easily instead of pinning the search to the header. Feed-like structure . I am a big fan of Aza Raskin&#39;s infinite scroll design and the fact that it provides such an easy way to engage users is just mind-blowing. That said, I must also confess that I am not a big fan of infinite scrolls on social media websites given their addictive nature. Blogs are fundamentally finite in nature. I mean even if you are a highly productive individual who writes a thousand page essay a day, you would have only written 365 essays and not all of them interesting to me. So having a feed-like structure on blogs I feel is fundamental to allowing users to engage in a more neutral way. And if you are still not sure of its utility, go join twitter or facebook or instagram, and comeback to read this again after a month or so. Untill then here is the screenshot: . Auto-tagging WIP posts on the feed . Sometimes you are writing something interesting but have not completed the entire thing, lets say like a series of posts on single, it can be helpful to show users right away on the feed/homepage the status so that when they click the post, their expectations are already managed. Here is a screenshot. Clickable tags . If you go the posts on the homepage, and go inside any of them and try to click on the tags such as date or category, you will see that it takes you to a page with all the posts belonging to that tag or date. Just a nifty little feature. And that is all! Thanks for scrolling all the way through to see all the features. Now if you&#39;d like to know how to use this theme, head over to the post titled [[How to setup Simply Jekyll]]. And if you would like to see how to use these features, head over to [[How to use Simply Jekyll features on your website]] . P.S If you use VSCode like me for content creation and authoring, and are interested in autocompletion of titles when you write your notes. You can use a small VSCode plugin that I wrote for myself to ease up my writing process: [[Notecomplete::https://github.com/rgvr/scratchpad/tree/master/note-complete]] .",
"url": "/explore"
},"3": {
"doc":  "How to setup Simply Jekyll",
"title": "How to setup Simply Jekyll",
"content": "This is going to be a super simple post about how to setup and use this theme for your own website. Usage . Q. What will it look like when I am done setting it up? . This is what it should look (minus the exact essays ofcourse): . Now without further ado, let&#39;s get started! . Setup Prerequisites . For this tutorial, we’ll need to install a few things on your machine (you may have some of these already). Following the instructions on each website to install them. | [[Ruby::https://www.ruby-lang.org/]] | [[RubyGems::https://rubygems.org/]] | [[Git::https://git-scm.com/downloads]] | . You’ll also need to create accounts on the following services: . | [[GitHub::https://www.github.com/join]] (to store the website) | [[Netlify::https://app.netlify.com/signup]] (to serve the website so others can see) | . Once you are all set with the prerequisites, we can then get to the fun part of getting it to appear on your screen. Let&#39;s get started with that. 1. Create a fork of the template repository . To simplify things, I provide the template showed in the image above to get started. You can always tweak this template to your taste later. Visit the GitHub page for my template repository ([[rgvr/simply-jekyll::https://github.com/rgvr/simply-jekyll]]), and fork it to your account using the Fork button: . Once the forking process is complete, you should have a fork (essentially a copy) of my template in your own GitHub account. On the GitHub page for your repository, click on the green “Clone or download” button, and copy the URL: we’ll need it for the next step. 2. Clone your repository locally . Next, we want to download the files from your GitHub repository onto your local machine. To do this, replace in the command below with the URL you copied in the previous step, then execute this command: . $ git clone &amp;lt;YOUR_COPIED_URL_HERE&amp;gt; my-personal-website . As a reference point, this is how it looks like for me (the difference is likely just the GitHub username): . $ git clone git@github.com:rgvr/simply-jekyll.git my-personal-website . Then, navigate into the directory that was just created: . $ cd my-personal-website . 3. Test out the site locally . Sweet! You now have your repository’s source code on your machine. Within the my-personal-website directory, run the following command to install the necessary dependencies like Jekyll: . $ bundle . Once that’s done, ask Jekyll to start serving the site locally: . $ bundle exec jekyll serve . Then, open up [[http://localhost:4000::http://localhost:4000]] in your browser. If everything’s done correctly, you should now see the home page of your Personal Jekyll Website with Simply Jekyll Theme. 🎉 . Keep in mind that this site is only available locally (notice the localhost part of the URL), so if we want it to be available on the Internet for everyone to enjoy, we need to deploy it to the Internet: we’ll use Netlify for that in the next step. 4. Connect your GitHub repository to Netlify . Netlify lets you automatically deploy your personal website on to the Internet when you update your GitHub repository. To do this, we need to connect your GitHub repository to Netlify: . | Log in to Netlify | Once logged in, click the “New site from Git” button | On the next page, select GitHub as the continuous deployment provider (you may need to authorize the connection, in which case, approve it) | On the next page, select your website repository from the list. | On the next page, replace the basic build settings with the following. | Type in &quot;jekyll build&quot; (without the quotes) inside the text field titled &quot;Build Command&quot;. | Similarly type in &quot;_site/&quot; (without the quotes) inside the text field titled &quot;Publish Directory&quot;. | . | On the next page, keep the default settings, and click on “Deploy site”. | . That was easy! We’re almost done. Wait a couple of minutes for the initial deploy to complete. Once that’s done, your website should be available on the Internet via a generic Netlify URL, which you can change to a custom domain later if you’d like. Now the cool thing is this: whenever you push an update to your GitHub repository, Netlify will automatically deploy your updates to the Internet. 5. Start producing content with your Simply Jekyll based Website . At this point, you can start updating the files on your machine (in the my-personal-website folder) to change your simply-jekyll based website to your liking: update the copy, add some notes, tweak the layout, customize the colors, etc. Once you have something you’re happy with, push your changes to your GitHub repository with the following commands: . $ git add --all $ git commit -m &#39;Update content&#39; $ git push origin master . If that command succeeds and the rest of the tutorial was done correctly, in a couple of minutes, you should see your changes live on your Netlify website. 🚀 . And we’re done! You now have your own Simply Jekyll based Personal Website . If you’re curious, take a look at [[my personal simply jekyll based website here::https://www.rgvr.me]].",
"url": "/setup"
},"4": {
"doc":  "How to customize your _config.yml",
"title": "How to customize your _config.yml",
"content": "One of the most common complaints I recieved after opensourcing the theme was that the customizability of the site at the level of liquid and ruby code was extremely inaccessible to people who just wanted to get it up and running. To be honest, up until then I was under the impression that everyone using the theme were some kind of technically proficient people who just didn&#39;t have the time to whip up their own theme, and are resorting to themes such as mine just so that they could have a decent looking site to share their works. The reality only dawned upon me when I got like several emails from people involved in the digital garden subculture—most of them from outside of tech—told me how they liked the features but were unable to use it effectively because it was obscured by something-something-brackety-brackets-and-colons-and-equalsigns. So this is my attempt at trying to ease the customization process. If you are someone with even a tiny bit of programming background, I would advice you to look into &#39;_includes&#39; folder and go to the corresponding file name and tinker with it. For those of you who are not into programming, I have tried to extract as many features as I can to _config.yml file, so that you can at least take the advantage of some if not all the features that are customizable. This table explains all the customizable variables in _config.yml. Most of the main variables have a property called enabled, which when set to true will enable the main variable. For eg. turn on subheading by setting the enabled property to true, if it is already true, set it to false and see what happens. | Variables | Behavior | . | baseurl | Base Url is where do you want the site to be served from, the top level directory. You can set it to / if you want to be served from the root directory, or else you can set to something like post or blog or something similar | . | url | This variable takes in the url of your site. This is the url that you registered with you domain registrar. Sometimes it can also be something different, such as in the case of github pages it would something like &amp;lt;username&amp;gt;.github.io | . | heading | This is the name of the site, this can only be renamed. It cannot be turned on or off | . | subheading | This is the subheading of the site, you can enable or disable it. You can change the subheading by changing the name property in it. Note: This cannot be toggled if the site tagline is turned off | . | tagline | This is the tagline of the site, you can toggle it using the enabled property in it. You can change the tagline by change the name property in it. Note: Toggling this off will also toggle off the subheading. This is a design decision because it looks ugly to have heading and subheading without anything to distinguish between the two. | . | copyright | I believe this is sort of self-explanatory. The year property takes the year and msg property takes the message, which in most cases is just your name or your organization&#39;s name. Oh and msg is a mandatory property for the copyright to enabled as it doesn&#39;t have any enabled property | . | user | This is one of the most interesting variables there is. Turning it on or off will remove the profile dashboard on the home-screen.It can be turned on or off using the display property. Setting display to true will look like this: and With it turned off like this: | . | name | Self-Explanatory. Note: Depends on user variable being turned on/off. If the user variable is turned off, none of its properties like name, bio, email, social will show up on the profile board. | . | bio | Self-Explanatory. Note: Depends on user variable being turned on/off. If the user variable is turned off, none of its properties like name, bio, email, social will show up on the profile board. | . | email | Self-Explanatory. Note: Depends on user variable being turned on/off. If the user variable is turned off, none of its properties like name, bio, email, social will show up on the profile board. | . | photo | This is the avatar that you see on the profile board when you turn the user variable on. Note: Depends on user variable being turned on/off. If the user variable is turned off, none of its properties like name, bio, email, social will show up on the profile board. | . | social | This is similar to the user property in that you can toggle the sub-properties by toggling it on/off. You can enable or disable the social variable by setting the enabled property to true/false. All the subproperties are fixed. You cannot add a new social media site, design constraint :( All the social media properties take a username as input, if you don&#39;t want a particular social handle to be displayed, please leave the field blank or type in null. | . | preferences | This variable is a special type of variable. It is only for usage in the code. Don&#39;t worry, if you are not interested in the code, you won&#39;t have any use for it anyway. | . | search | This variable can toggled on or off by setting the enabled property. The shortcut_hint property is just a toggle for the markup that show Shift + S on the search bar | . | wiki-style link | This variable allows you to opt-in or out of the wiki-style double brackets for specifiying internal and external links. | . | sidenotes | This variable covers both sidenotes and margin notes. Toggling this on-or-off will allow you use the custom sidenote syntax you saw in the [[How to use Simply Jekyll features on your website]] post. | . | transclusion | Similar to sidenotes | . | pagepreview | This variable controls the on-hover behavior of internal links, that is, if you hover over an internal link it will show a small preview tooltip thingy if this variable turned on. | . | wrapping | This variable allows you to wrap text using a wrapped box. Eg. [[Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.::wrap]] | . | highlight | Any text inside the highlight syntax mentioned in the [[How to use Simply Jekyll features on your website]] will be highlighted based on the color you mention in the color property of the variable. Eg. This is how it will look when [[highlighted::highlight]]. | . | backlinks | This variable controls the references that you see at the bottom of a post. Note that toggling it off will also remove it from the contextmenu. SEE Below: | . | related | This variable controls the references related by tags that you see at the bottom of a post. Note that toggling it off will also remove it from the contextmenu. Similar to backlinks. | . | contextmenu | This variable allows you to right click on the post list on the home page to do things like copy links, see backlinks and related posts without going in. | .",
"url": "/customizable"
},"5": {
"doc":  "How to use Simply Jekyll features on your website",
"title": "How to use Simply Jekyll features on your website",
"content": "Welcome to this feature usage tour. This is going to be another short post that describes how to use all the fancy features we saw in [[Exploring the features of Simply Jekyll]]. So without further ado, let&#39;s get started. The default features . All the default jekyll markdown features are made available such that they don&#39;t cause any conflict with the custom features that we have implemented. To see how to the raw markdown gets generated, go to the [[Test page to see how the raw markdown is rendered]] . The Custom features . 1. Creating a wiki-style link . General Syntax . | Internal links: [​[​Some Link]] . | External links: [​[​Some Text::https://address-to-the-website]] . | . Anything text inside a double square bracket is considered as an internal link. The text has to be a valid title, if you provide a random text inside double square brackets, it will showup highlighted in yellow telling you that there is no essay/article/file with the mentioned title. Similarly, for external links all you have to do is add a double colon after the &quot;Alt text&quot; and enter the link to the website after the double colon as seen below. Examples . Example of an internal link that points to a valid post or page, that is, a page with the title (not url) mentioned in the double brackets. Raw Syntax: [​[Lorem ipsum dolor sit amet]] . Rendered Text: [[Lorem ipsum dolor sit amet]] . Example of an internal link that do not point to a valid post or page, that is, a page with the title (not url) mentioned in the double brackets. Raw Syntax: [​[Title of a non-existent page]] . Rendered Text: [[Title of a non-existent page]] . 2. Creating a sidenote or a marginnote . General Syntax . | Sidenote: [​[Some Text::keyword-of-the-type-of-the-sidenote]] . | Marginnote: [​[​Some Text::keyword-of-the-type-of-the-marginnote]] . | . | Type of the sidenote/marginnote | keyword | . | Left Sidenote | lsn | . | Right Sidenote | rsn | . | Left Marginnote | lmn | . | Right Marginnote | rmn | . So, all you have to do is type in the keywords of the corresponding type of sidenote or marginnote after the double colon in the above syntax . Examples . Example of a sidenote to the right side of the page: . Raw Syntax: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. [​[Phasellus mollis lectus id efficitur mollis.::rsn]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis. Rendered Text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. [[Phasellus mollis lectus id efficitur mollis.::rsn]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis. Same goes with lsn, rmn, lmn . 3. Highlighting a piece of text . General Syntax . | [​[​Some Link::highlight]] | . There is only one color right now in which it highlights, a light bluish color, but you can easily extend it to support multiple colors by tinkering with it in content.html file in _includes directory. Examples . Raw Syntax: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. [​[Phasellus mollis lectus id efficitur mollis.::highlight]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis. Rendered Text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. [[Phasellus mollis lectus id efficitur mollis.::highlight]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis. 4. Partial Transclusion . Transclusion is just a natural extension of sidenote and marginnote feature. General Syntax . | Sidenote-transclusion: [​[Some Text::keyword-of-the-type-of-the-sidenote-transclusion]] . | Marginnote-transclusion: [​[​Some Text::keyword-of-the-type-of-the-marginnote-transclusion]] . | . | Type of the sidenote/marginnote transclusion | keyword | . | Left Sidenote Transclusion | lsn-transclude | . | Right Sidenote Transclusion | rsn-transclude | . | Left Marginnote Transclusion | lmn-transclude | . | Right Marginnote Transclusion | rmn-transclude | . So, all you have to do is type in the keywords of the corresponding type of sidenote or marginnote after the double colon in the above syntax . Examples . Example of a transclusion to the right side of the page: . Raw Syntax: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. [​[Lorem ipsum dolor sit amet::rmn-transclude]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis. Rendered Text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. [[Lorem ipsum dolor sit amet::rmn-transclude]] Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis. Same goes with rsn, lsn, lmn . 5. Wrapping a text inside a box . General Syntax . | [​[Some Text::wrap]] | . Examples . Raw Syntax: [​[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis::wrap]]. Rendered Text: [[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum tortor in pharetra vehicula. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis.::wrap]] . 6. Flashcard . General Syntax . | [​[Some Text::srs]] | . Examples . Raw Syntax: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [​[Donec rutrum tortor in pharetra vehicula::srs]]. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis. Rendered Text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [[Donec rutrum tortor in pharetra vehicula::srs]]. Fusce gravida lacus ac sem luctus congue at id justo. Ut sed tempus ante. Suspendisse sit amet diam nec justo rhoncus tristique. Ut blandit faucibus nisi vitae rutrum. Vivamus fermentum efficitur justo non facilisis. 7. Specific classes for changing font-type, font-size, and font-weight . There are classes like very-small, medium-small, small, small-medium, medium, medium-large, large, very-large; that can be used to change the size of your text directly from markdown like this: . Raw Syntax: . {:.large} Some text here that needs to be enlarged . Rendered Text: . Some text here that needs to be enlarged . Similarly there are classes like regular-sans, serif, bold, italic, oblique, bolder, etc for formatting the text. Raw Syntax: . {:.medium .serif .oblique} Some text here that needs to be enlarged . Rendered Text: . Some text here that needs to be enlarged . Other common classes are .boxit that is used to wrap the text, .disable-user-select to disallow users from being able to select a particular piece of text by selecting it, etc. There are more classes like these which you can see in the file style.css. Once you figure out which class to use, all you have to do is just add the class before the text you want inside a curl brace like this ​{:&amp;lt;classnames-with-dot-prepended-to-them&amp;gt;​} . 8. Other implicit features. Features like backlinks, context menu, related posts, page preview are available by default as they are implemented using CSS and JS. So, you don&#39;t have to do anything other than write as you would normally to make use of those features. Note: . When you typeout square brackets, it can be frustrating to type out the entire file title everytime. At least it was for me, so I created a small VSCode plugin, the editor in which I write my essays to autocomplete the titles as soon as I type double squarebrackets. It has been pretty handy for me, if you are interested in using VSCode or already use it, you can find it here: [[Notecomplete::https://github.com/rgvr/scratchpad/tree/master/note-complete]]. It is pretty simple to use, all you have to do is just download the note-complete folder and copy it to .vscode directory in your OS to start using it. :) . For setting up the theme on your website checkout [[How to setup Simply Jekyll]] .",
"url": "/usage"
},"6": {
"doc":  "Test page to see how the raw markdown is rendered",
"title": "Test page to see how the raw markdown is rendered",
"content": "This is intended as a quick reference and showcase. | Headings | H1 . | H2 . | H3 . | H4 . | H5 . | H6 | . | . | . | Emphasis | Lists | Links | Images | Code and Syntax Highlighting | Math expressions | Tables | Blockquotes | . | Inline HTML . | Horizontal Rule | Line Breaks | . | . | . Headings . # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 . H1 . H2 . H3 . H4 . H5 . H6 . Emphasis . Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ . Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough uses two tildes. Scratch this. Lists . 1. First ordered list item ...1. Ordered sublist 2. Another item ...* Unordered sublist 3. Actual numbers don&#39;t matter, just that it&#39;s a number 4. And another item. ⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&#39;ll use three here to also align the raw Markdown). ⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses . | First ordered list item . | Ordered sublist | . | Another item . | Unordered sublist | . | Actual numbers don&#39;t matter, just that it&#39;s a number | And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&#39;ll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ Note that this line is separate, but within the same paragraph.⋅⋅ (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) . | . | Unordered list can use asterisks | Or minuses | Or pluses | . Links . [I&#39;m an inline-style link](https://www.google.com) [I&#39;m an inline-style link with title](https://www.google.com &quot;Google&#39;s Homepage&quot;) [I&#39;m a reference-style link][Arbitrary case-insensitive reference text] [I&#39;m a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or &amp;lt;http://www.example.com&amp;gt; and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com . I&#39;m an inline-style link . I&#39;m an inline-style link with title . I&#39;m a reference-style link . I&#39;m a relative reference to a repository file . You can use numbers for reference-style link definitions . Or leave it empty and use the link text itself. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. Images . Here&#39;s our logo (hover to see the title text): Inline-style: ![alt text](/assets/img/profile.png &quot;Logo Title Text 1&quot;) Reference-style: ![alt text][logo] [logo]: /assets/img/profile.png &quot;Logo Title Text 2&quot; . Here&#39;s our logo (hover to see the title text): . Inline-style: . Reference-style: . Code and Syntax Highlighting . Code blocks are part of the Markdown spec, but syntax highlighting isn&#39;t. However, many renderers – like Github&#39;s and Markdown Here – support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); . Inline `code` has `back-ticks around` it. Inline code has back-ticks around it. Blocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks – they&#39;re easier and only they support syntax highlighting. ```javascript var s = &quot;JavaScript syntax highlighting&quot;; alert(s); ``` ```python s = &quot;Python syntax highlighting&quot; print s ``` ``` No language indicated, so no syntax highlighting. But let&#39;s throw in a tag. ``` . var s = &quot;JavaScript syntax highlighting&quot;; alert(s); . s = &quot;Python syntax highlighting&quot; print s . No language indicated, so no syntax highlighting. But let&#39;s throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;. Math expressions . You can write math expressions using the \\LateX\\LateX\\LateX markup language between double dollar signs : $$…$$. They can be written inline or as a single block. For example, . | $$P(A | B) = \\frac{P(B | A)\\cdot P(A)}{P(B)}$$ will render as : | . P(A∣B)=P(B∣A)⋅P(A)P(B)P(A|B) = \\frac{P(B | A)\\cdot P(A)}{P(B)}P(A∣B)=P(B)P(B∣A)⋅P(A)​ | Please note that for a math block to be displayed correctly, it needs to be separated by an empty line, above and below. Besides, the pipe character | may conflict with markdown : it is recommended to use \\vert instead. | . Tables . Tables aren&#39;t part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email – a task that would otherwise require copy-pasting from another application. Colons can be used to align columns. | Tables | Are | Cool | ------------- |:-------------:| -----:| col 3 is | right-aligned | $1600 | col 2 is | centered | $12 | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don&#39;t need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 . Colons can be used to align columns. | Tables | Are | Cool | . | col 3 is | right-aligned | $1600 | . | col 2 is | centered | $12 | . | zebra stripes | are neat | $1 | . There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don&#39;t need to make the raw Markdown line up prettily. You can also use inline Markdown. | Markdown | Less | Pretty | . | Still | renders | nicely | . | 1 | 2 | 3 | . Blockquotes . &amp;gt; Blockquotes are very handy in email to emulate reply text. &amp;gt; This line is part of the same quote. Quote break. &amp;gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let&#39;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let&#39;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. Inline HTML . You can also use raw HTML in your Markdown, and it&#39;ll mostly work pretty well. &amp;lt;dl&amp;gt; &amp;lt;dt&amp;gt;Definition list&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;Is something people use sometimes.&amp;lt;/dd&amp;gt; &amp;lt;dt&amp;gt;Markdown in HTML&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;Does *not* work **very** well. Use HTML &amp;lt;em&amp;gt;tags&amp;lt;/em&amp;gt;.&amp;lt;/dd&amp;gt; &amp;lt;/dl&amp;gt; . You can also use raw HTML in your Markdown, and it&#39;ll mostly work pretty well. Definition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags. Horizontal Rule . Three or more... --- Hyphens *** Asterisks ___ Underscores . Three or more… . Hyphens . Asterisks . Underscores . Line Breaks . My basic recommendation for learning how line breaks work is to experiment and discover – hit once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You&#39;ll soon learn to get what you want. &quot;Markdown Toggle&quot; is your friend. Here are some things to try out: . Here&#39;s a line for us to start with. This line is separated from the one above by two newlines, so it will be a *separate paragraph*. This line is also a separate paragraph, but... This line is only separated by a single newline, so it&#39;s a separate line in the *same paragraph*. Here&#39;s a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph. This line is also a separate paragraph, but… This line is only separated by a single newline, so it&#39;s a separate line in the same paragraph. License: CC-BY .",
"url": "/test"
}
}